
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Objective
 * 
 */
export type Objective = $Result.DefaultSelection<Prisma.$ObjectivePayload>
/**
 * Model KeyResult
 * 
 */
export type KeyResult = $Result.DefaultSelection<Prisma.$KeyResultPayload>
/**
 * Model Cheer
 * 
 */
export type Cheer = $Result.DefaultSelection<Prisma.$CheerPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Progress: {
  NOT_YET_STARTED: 'NOT_YET_STARTED',
  ON_THE_WAY: 'ON_THE_WAY',
  GETTING_THERE: 'GETTING_THERE',
  REACHING_SOON: 'REACHING_SOON',
  COMPLETED: 'COMPLETED'
};

export type Progress = (typeof Progress)[keyof typeof Progress]

}

export type Progress = $Enums.Progress

export const Progress: typeof $Enums.Progress

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Objectives
 * const objectives = await prisma.objective.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Objectives
   * const objectives = await prisma.objective.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.objective`: Exposes CRUD operations for the **Objective** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Objectives
    * const objectives = await prisma.objective.findMany()
    * ```
    */
  get objective(): Prisma.ObjectiveDelegate<ExtArgs>;

  /**
   * `prisma.keyResult`: Exposes CRUD operations for the **KeyResult** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more KeyResults
    * const keyResults = await prisma.keyResult.findMany()
    * ```
    */
  get keyResult(): Prisma.KeyResultDelegate<ExtArgs>;

  /**
   * `prisma.cheer`: Exposes CRUD operations for the **Cheer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cheers
    * const cheers = await prisma.cheer.findMany()
    * ```
    */
  get cheer(): Prisma.CheerDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.14.0
   * Query Engine version: e9771e62de70f79a5e1c604a2d7c8e2a0a874b48
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Objective: 'Objective',
    KeyResult: 'KeyResult',
    Cheer: 'Cheer'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'objective' | 'keyResult' | 'cheer'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Objective: {
        payload: Prisma.$ObjectivePayload<ExtArgs>
        fields: Prisma.ObjectiveFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ObjectiveFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ObjectivePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ObjectiveFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ObjectivePayload>
          }
          findFirst: {
            args: Prisma.ObjectiveFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ObjectivePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ObjectiveFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ObjectivePayload>
          }
          findMany: {
            args: Prisma.ObjectiveFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ObjectivePayload>[]
          }
          create: {
            args: Prisma.ObjectiveCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ObjectivePayload>
          }
          createMany: {
            args: Prisma.ObjectiveCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ObjectiveCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ObjectivePayload>[]
          }
          delete: {
            args: Prisma.ObjectiveDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ObjectivePayload>
          }
          update: {
            args: Prisma.ObjectiveUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ObjectivePayload>
          }
          deleteMany: {
            args: Prisma.ObjectiveDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ObjectiveUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ObjectiveUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ObjectivePayload>
          }
          aggregate: {
            args: Prisma.ObjectiveAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateObjective>
          }
          groupBy: {
            args: Prisma.ObjectiveGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ObjectiveGroupByOutputType>[]
          }
          count: {
            args: Prisma.ObjectiveCountArgs<ExtArgs>,
            result: $Utils.Optional<ObjectiveCountAggregateOutputType> | number
          }
        }
      }
      KeyResult: {
        payload: Prisma.$KeyResultPayload<ExtArgs>
        fields: Prisma.KeyResultFieldRefs
        operations: {
          findUnique: {
            args: Prisma.KeyResultFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KeyResultPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.KeyResultFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KeyResultPayload>
          }
          findFirst: {
            args: Prisma.KeyResultFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KeyResultPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.KeyResultFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KeyResultPayload>
          }
          findMany: {
            args: Prisma.KeyResultFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KeyResultPayload>[]
          }
          create: {
            args: Prisma.KeyResultCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KeyResultPayload>
          }
          createMany: {
            args: Prisma.KeyResultCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.KeyResultCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KeyResultPayload>[]
          }
          delete: {
            args: Prisma.KeyResultDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KeyResultPayload>
          }
          update: {
            args: Prisma.KeyResultUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KeyResultPayload>
          }
          deleteMany: {
            args: Prisma.KeyResultDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.KeyResultUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.KeyResultUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KeyResultPayload>
          }
          aggregate: {
            args: Prisma.KeyResultAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateKeyResult>
          }
          groupBy: {
            args: Prisma.KeyResultGroupByArgs<ExtArgs>,
            result: $Utils.Optional<KeyResultGroupByOutputType>[]
          }
          count: {
            args: Prisma.KeyResultCountArgs<ExtArgs>,
            result: $Utils.Optional<KeyResultCountAggregateOutputType> | number
          }
        }
      }
      Cheer: {
        payload: Prisma.$CheerPayload<ExtArgs>
        fields: Prisma.CheerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CheerFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CheerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CheerFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CheerPayload>
          }
          findFirst: {
            args: Prisma.CheerFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CheerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CheerFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CheerPayload>
          }
          findMany: {
            args: Prisma.CheerFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CheerPayload>[]
          }
          create: {
            args: Prisma.CheerCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CheerPayload>
          }
          createMany: {
            args: Prisma.CheerCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CheerCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CheerPayload>[]
          }
          delete: {
            args: Prisma.CheerDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CheerPayload>
          }
          update: {
            args: Prisma.CheerUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CheerPayload>
          }
          deleteMany: {
            args: Prisma.CheerDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CheerUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CheerUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CheerPayload>
          }
          aggregate: {
            args: Prisma.CheerAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCheer>
          }
          groupBy: {
            args: Prisma.CheerGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CheerGroupByOutputType>[]
          }
          count: {
            args: Prisma.CheerCountArgs<ExtArgs>,
            result: $Utils.Optional<CheerCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ObjectiveCountOutputType
   */

  export type ObjectiveCountOutputType = {
    keyResults: number
  }

  export type ObjectiveCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    keyResults?: boolean | ObjectiveCountOutputTypeCountKeyResultsArgs
  }

  // Custom InputTypes
  /**
   * ObjectiveCountOutputType without action
   */
  export type ObjectiveCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ObjectiveCountOutputType
     */
    select?: ObjectiveCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ObjectiveCountOutputType without action
   */
  export type ObjectiveCountOutputTypeCountKeyResultsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KeyResultWhereInput
  }


  /**
   * Count Type KeyResultCountOutputType
   */

  export type KeyResultCountOutputType = {
    cheers: number
  }

  export type KeyResultCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cheers?: boolean | KeyResultCountOutputTypeCountCheersArgs
  }

  // Custom InputTypes
  /**
   * KeyResultCountOutputType without action
   */
  export type KeyResultCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeyResultCountOutputType
     */
    select?: KeyResultCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * KeyResultCountOutputType without action
   */
  export type KeyResultCountOutputTypeCountCheersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CheerWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Objective
   */

  export type AggregateObjective = {
    _count: ObjectiveCountAggregateOutputType | null
    _avg: ObjectiveAvgAggregateOutputType | null
    _sum: ObjectiveSumAggregateOutputType | null
    _min: ObjectiveMinAggregateOutputType | null
    _max: ObjectiveMaxAggregateOutputType | null
  }

  export type ObjectiveAvgAggregateOutputType = {
    id: number | null
  }

  export type ObjectiveSumAggregateOutputType = {
    id: number | null
  }

  export type ObjectiveMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type ObjectiveMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type ObjectiveCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type ObjectiveAvgAggregateInputType = {
    id?: true
  }

  export type ObjectiveSumAggregateInputType = {
    id?: true
  }

  export type ObjectiveMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type ObjectiveMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type ObjectiveCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type ObjectiveAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Objective to aggregate.
     */
    where?: ObjectiveWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Objectives to fetch.
     */
    orderBy?: ObjectiveOrderByWithRelationInput | ObjectiveOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ObjectiveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Objectives from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Objectives.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Objectives
    **/
    _count?: true | ObjectiveCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ObjectiveAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ObjectiveSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ObjectiveMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ObjectiveMaxAggregateInputType
  }

  export type GetObjectiveAggregateType<T extends ObjectiveAggregateArgs> = {
        [P in keyof T & keyof AggregateObjective]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateObjective[P]>
      : GetScalarType<T[P], AggregateObjective[P]>
  }




  export type ObjectiveGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ObjectiveWhereInput
    orderBy?: ObjectiveOrderByWithAggregationInput | ObjectiveOrderByWithAggregationInput[]
    by: ObjectiveScalarFieldEnum[] | ObjectiveScalarFieldEnum
    having?: ObjectiveScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ObjectiveCountAggregateInputType | true
    _avg?: ObjectiveAvgAggregateInputType
    _sum?: ObjectiveSumAggregateInputType
    _min?: ObjectiveMinAggregateInputType
    _max?: ObjectiveMaxAggregateInputType
  }

  export type ObjectiveGroupByOutputType = {
    id: number
    name: string
    _count: ObjectiveCountAggregateOutputType | null
    _avg: ObjectiveAvgAggregateOutputType | null
    _sum: ObjectiveSumAggregateOutputType | null
    _min: ObjectiveMinAggregateOutputType | null
    _max: ObjectiveMaxAggregateOutputType | null
  }

  type GetObjectiveGroupByPayload<T extends ObjectiveGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ObjectiveGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ObjectiveGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ObjectiveGroupByOutputType[P]>
            : GetScalarType<T[P], ObjectiveGroupByOutputType[P]>
        }
      >
    >


  export type ObjectiveSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    keyResults?: boolean | Objective$keyResultsArgs<ExtArgs>
    _count?: boolean | ObjectiveCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["objective"]>

  export type ObjectiveSelectScalar = {
    id?: boolean
    name?: boolean
  }


  export type ObjectiveInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    keyResults?: boolean | Objective$keyResultsArgs<ExtArgs>
    _count?: boolean | ObjectiveCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ObjectivePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Objective"
    objects: {
      keyResults: Prisma.$KeyResultPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["objective"]>
    composites: {}
  }


  type ObjectiveGetPayload<S extends boolean | null | undefined | ObjectiveDefaultArgs> = $Result.GetResult<Prisma.$ObjectivePayload, S>

  type ObjectiveCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ObjectiveFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ObjectiveCountAggregateInputType | true
    }

  export interface ObjectiveDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Objective'], meta: { name: 'Objective' } }
    /**
     * Find zero or one Objective that matches the filter.
     * @param {ObjectiveFindUniqueArgs} args - Arguments to find a Objective
     * @example
     * // Get one Objective
     * const objective = await prisma.objective.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ObjectiveFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ObjectiveFindUniqueArgs<ExtArgs>>
    ): Prisma__ObjectiveClient<$Result.GetResult<Prisma.$ObjectivePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Objective that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ObjectiveFindUniqueOrThrowArgs} args - Arguments to find a Objective
     * @example
     * // Get one Objective
     * const objective = await prisma.objective.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ObjectiveFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ObjectiveFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ObjectiveClient<$Result.GetResult<Prisma.$ObjectivePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Objective that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ObjectiveFindFirstArgs} args - Arguments to find a Objective
     * @example
     * // Get one Objective
     * const objective = await prisma.objective.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ObjectiveFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ObjectiveFindFirstArgs<ExtArgs>>
    ): Prisma__ObjectiveClient<$Result.GetResult<Prisma.$ObjectivePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Objective that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ObjectiveFindFirstOrThrowArgs} args - Arguments to find a Objective
     * @example
     * // Get one Objective
     * const objective = await prisma.objective.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ObjectiveFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ObjectiveFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ObjectiveClient<$Result.GetResult<Prisma.$ObjectivePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Objectives that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ObjectiveFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Objectives
     * const objectives = await prisma.objective.findMany()
     * 
     * // Get first 10 Objectives
     * const objectives = await prisma.objective.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const objectiveWithIdOnly = await prisma.objective.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ObjectiveFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ObjectiveFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ObjectivePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Objective.
     * @param {ObjectiveCreateArgs} args - Arguments to create a Objective.
     * @example
     * // Create one Objective
     * const Objective = await prisma.objective.create({
     *   data: {
     *     // ... data to create a Objective
     *   }
     * })
     * 
    **/
    create<T extends ObjectiveCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ObjectiveCreateArgs<ExtArgs>>
    ): Prisma__ObjectiveClient<$Result.GetResult<Prisma.$ObjectivePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Objectives.
     * @param {ObjectiveCreateManyArgs} args - Arguments to create many Objectives.
     * @example
     * // Create many Objectives
     * const objective = await prisma.objective.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends ObjectiveCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ObjectiveCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Objectives and returns the data saved in the database.
     * @param {ObjectiveCreateManyAndReturnArgs} args - Arguments to create many Objectives.
     * @example
     * // Create many Objectives
     * const objective = await prisma.objective.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Objectives and only return the `id`
     * const objectiveWithIdOnly = await prisma.objective.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends ObjectiveCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, ObjectiveCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ObjectivePayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Objective.
     * @param {ObjectiveDeleteArgs} args - Arguments to delete one Objective.
     * @example
     * // Delete one Objective
     * const Objective = await prisma.objective.delete({
     *   where: {
     *     // ... filter to delete one Objective
     *   }
     * })
     * 
    **/
    delete<T extends ObjectiveDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ObjectiveDeleteArgs<ExtArgs>>
    ): Prisma__ObjectiveClient<$Result.GetResult<Prisma.$ObjectivePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Objective.
     * @param {ObjectiveUpdateArgs} args - Arguments to update one Objective.
     * @example
     * // Update one Objective
     * const objective = await prisma.objective.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ObjectiveUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ObjectiveUpdateArgs<ExtArgs>>
    ): Prisma__ObjectiveClient<$Result.GetResult<Prisma.$ObjectivePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Objectives.
     * @param {ObjectiveDeleteManyArgs} args - Arguments to filter Objectives to delete.
     * @example
     * // Delete a few Objectives
     * const { count } = await prisma.objective.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ObjectiveDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ObjectiveDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Objectives.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ObjectiveUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Objectives
     * const objective = await prisma.objective.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ObjectiveUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ObjectiveUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Objective.
     * @param {ObjectiveUpsertArgs} args - Arguments to update or create a Objective.
     * @example
     * // Update or create a Objective
     * const objective = await prisma.objective.upsert({
     *   create: {
     *     // ... data to create a Objective
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Objective we want to update
     *   }
     * })
    **/
    upsert<T extends ObjectiveUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ObjectiveUpsertArgs<ExtArgs>>
    ): Prisma__ObjectiveClient<$Result.GetResult<Prisma.$ObjectivePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Objectives.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ObjectiveCountArgs} args - Arguments to filter Objectives to count.
     * @example
     * // Count the number of Objectives
     * const count = await prisma.objective.count({
     *   where: {
     *     // ... the filter for the Objectives we want to count
     *   }
     * })
    **/
    count<T extends ObjectiveCountArgs>(
      args?: Subset<T, ObjectiveCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ObjectiveCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Objective.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ObjectiveAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ObjectiveAggregateArgs>(args: Subset<T, ObjectiveAggregateArgs>): Prisma.PrismaPromise<GetObjectiveAggregateType<T>>

    /**
     * Group by Objective.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ObjectiveGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ObjectiveGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ObjectiveGroupByArgs['orderBy'] }
        : { orderBy?: ObjectiveGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ObjectiveGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetObjectiveGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Objective model
   */
  readonly fields: ObjectiveFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Objective.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ObjectiveClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    keyResults<T extends Objective$keyResultsArgs<ExtArgs> = {}>(args?: Subset<T, Objective$keyResultsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KeyResultPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Objective model
   */ 
  interface ObjectiveFieldRefs {
    readonly id: FieldRef<"Objective", 'Int'>
    readonly name: FieldRef<"Objective", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Objective findUnique
   */
  export type ObjectiveFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Objective
     */
    select?: ObjectiveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObjectiveInclude<ExtArgs> | null
    /**
     * Filter, which Objective to fetch.
     */
    where: ObjectiveWhereUniqueInput
  }

  /**
   * Objective findUniqueOrThrow
   */
  export type ObjectiveFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Objective
     */
    select?: ObjectiveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObjectiveInclude<ExtArgs> | null
    /**
     * Filter, which Objective to fetch.
     */
    where: ObjectiveWhereUniqueInput
  }

  /**
   * Objective findFirst
   */
  export type ObjectiveFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Objective
     */
    select?: ObjectiveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObjectiveInclude<ExtArgs> | null
    /**
     * Filter, which Objective to fetch.
     */
    where?: ObjectiveWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Objectives to fetch.
     */
    orderBy?: ObjectiveOrderByWithRelationInput | ObjectiveOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Objectives.
     */
    cursor?: ObjectiveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Objectives from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Objectives.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Objectives.
     */
    distinct?: ObjectiveScalarFieldEnum | ObjectiveScalarFieldEnum[]
  }

  /**
   * Objective findFirstOrThrow
   */
  export type ObjectiveFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Objective
     */
    select?: ObjectiveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObjectiveInclude<ExtArgs> | null
    /**
     * Filter, which Objective to fetch.
     */
    where?: ObjectiveWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Objectives to fetch.
     */
    orderBy?: ObjectiveOrderByWithRelationInput | ObjectiveOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Objectives.
     */
    cursor?: ObjectiveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Objectives from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Objectives.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Objectives.
     */
    distinct?: ObjectiveScalarFieldEnum | ObjectiveScalarFieldEnum[]
  }

  /**
   * Objective findMany
   */
  export type ObjectiveFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Objective
     */
    select?: ObjectiveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObjectiveInclude<ExtArgs> | null
    /**
     * Filter, which Objectives to fetch.
     */
    where?: ObjectiveWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Objectives to fetch.
     */
    orderBy?: ObjectiveOrderByWithRelationInput | ObjectiveOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Objectives.
     */
    cursor?: ObjectiveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Objectives from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Objectives.
     */
    skip?: number
    distinct?: ObjectiveScalarFieldEnum | ObjectiveScalarFieldEnum[]
  }

  /**
   * Objective create
   */
  export type ObjectiveCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Objective
     */
    select?: ObjectiveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObjectiveInclude<ExtArgs> | null
    /**
     * The data needed to create a Objective.
     */
    data: XOR<ObjectiveCreateInput, ObjectiveUncheckedCreateInput>
  }

  /**
   * Objective createMany
   */
  export type ObjectiveCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Objectives.
     */
    data: ObjectiveCreateManyInput | ObjectiveCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Objective createManyAndReturn
   */
  export type ObjectiveCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Objective
     */
    select?: ObjectiveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObjectiveInclude<ExtArgs> | null
    /**
     * The data used to create many Objectives.
     */
    data: ObjectiveCreateManyInput | ObjectiveCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Objective update
   */
  export type ObjectiveUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Objective
     */
    select?: ObjectiveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObjectiveInclude<ExtArgs> | null
    /**
     * The data needed to update a Objective.
     */
    data: XOR<ObjectiveUpdateInput, ObjectiveUncheckedUpdateInput>
    /**
     * Choose, which Objective to update.
     */
    where: ObjectiveWhereUniqueInput
  }

  /**
   * Objective updateMany
   */
  export type ObjectiveUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Objectives.
     */
    data: XOR<ObjectiveUpdateManyMutationInput, ObjectiveUncheckedUpdateManyInput>
    /**
     * Filter which Objectives to update
     */
    where?: ObjectiveWhereInput
  }

  /**
   * Objective upsert
   */
  export type ObjectiveUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Objective
     */
    select?: ObjectiveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObjectiveInclude<ExtArgs> | null
    /**
     * The filter to search for the Objective to update in case it exists.
     */
    where: ObjectiveWhereUniqueInput
    /**
     * In case the Objective found by the `where` argument doesn't exist, create a new Objective with this data.
     */
    create: XOR<ObjectiveCreateInput, ObjectiveUncheckedCreateInput>
    /**
     * In case the Objective was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ObjectiveUpdateInput, ObjectiveUncheckedUpdateInput>
  }

  /**
   * Objective delete
   */
  export type ObjectiveDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Objective
     */
    select?: ObjectiveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObjectiveInclude<ExtArgs> | null
    /**
     * Filter which Objective to delete.
     */
    where: ObjectiveWhereUniqueInput
  }

  /**
   * Objective deleteMany
   */
  export type ObjectiveDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Objectives to delete
     */
    where?: ObjectiveWhereInput
  }

  /**
   * Objective.keyResults
   */
  export type Objective$keyResultsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeyResult
     */
    select?: KeyResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeyResultInclude<ExtArgs> | null
    where?: KeyResultWhereInput
    orderBy?: KeyResultOrderByWithRelationInput | KeyResultOrderByWithRelationInput[]
    cursor?: KeyResultWhereUniqueInput
    take?: number
    skip?: number
    distinct?: KeyResultScalarFieldEnum | KeyResultScalarFieldEnum[]
  }

  /**
   * Objective without action
   */
  export type ObjectiveDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Objective
     */
    select?: ObjectiveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObjectiveInclude<ExtArgs> | null
  }


  /**
   * Model KeyResult
   */

  export type AggregateKeyResult = {
    _count: KeyResultCountAggregateOutputType | null
    _avg: KeyResultAvgAggregateOutputType | null
    _sum: KeyResultSumAggregateOutputType | null
    _min: KeyResultMinAggregateOutputType | null
    _max: KeyResultMaxAggregateOutputType | null
  }

  export type KeyResultAvgAggregateOutputType = {
    id: number | null
    objectiveId: number | null
  }

  export type KeyResultSumAggregateOutputType = {
    id: number | null
    objectiveId: number | null
  }

  export type KeyResultMinAggregateOutputType = {
    id: number | null
    objectiveId: number | null
    description: string | null
    owner: string | null
    targetEndDate: Date | null
    progress: $Enums.Progress | null
  }

  export type KeyResultMaxAggregateOutputType = {
    id: number | null
    objectiveId: number | null
    description: string | null
    owner: string | null
    targetEndDate: Date | null
    progress: $Enums.Progress | null
  }

  export type KeyResultCountAggregateOutputType = {
    id: number
    objectiveId: number
    description: number
    owner: number
    targetEndDate: number
    progress: number
    _all: number
  }


  export type KeyResultAvgAggregateInputType = {
    id?: true
    objectiveId?: true
  }

  export type KeyResultSumAggregateInputType = {
    id?: true
    objectiveId?: true
  }

  export type KeyResultMinAggregateInputType = {
    id?: true
    objectiveId?: true
    description?: true
    owner?: true
    targetEndDate?: true
    progress?: true
  }

  export type KeyResultMaxAggregateInputType = {
    id?: true
    objectiveId?: true
    description?: true
    owner?: true
    targetEndDate?: true
    progress?: true
  }

  export type KeyResultCountAggregateInputType = {
    id?: true
    objectiveId?: true
    description?: true
    owner?: true
    targetEndDate?: true
    progress?: true
    _all?: true
  }

  export type KeyResultAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which KeyResult to aggregate.
     */
    where?: KeyResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KeyResults to fetch.
     */
    orderBy?: KeyResultOrderByWithRelationInput | KeyResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: KeyResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KeyResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KeyResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned KeyResults
    **/
    _count?: true | KeyResultCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: KeyResultAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: KeyResultSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KeyResultMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KeyResultMaxAggregateInputType
  }

  export type GetKeyResultAggregateType<T extends KeyResultAggregateArgs> = {
        [P in keyof T & keyof AggregateKeyResult]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKeyResult[P]>
      : GetScalarType<T[P], AggregateKeyResult[P]>
  }




  export type KeyResultGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KeyResultWhereInput
    orderBy?: KeyResultOrderByWithAggregationInput | KeyResultOrderByWithAggregationInput[]
    by: KeyResultScalarFieldEnum[] | KeyResultScalarFieldEnum
    having?: KeyResultScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KeyResultCountAggregateInputType | true
    _avg?: KeyResultAvgAggregateInputType
    _sum?: KeyResultSumAggregateInputType
    _min?: KeyResultMinAggregateInputType
    _max?: KeyResultMaxAggregateInputType
  }

  export type KeyResultGroupByOutputType = {
    id: number
    objectiveId: number
    description: string
    owner: string
    targetEndDate: Date
    progress: $Enums.Progress
    _count: KeyResultCountAggregateOutputType | null
    _avg: KeyResultAvgAggregateOutputType | null
    _sum: KeyResultSumAggregateOutputType | null
    _min: KeyResultMinAggregateOutputType | null
    _max: KeyResultMaxAggregateOutputType | null
  }

  type GetKeyResultGroupByPayload<T extends KeyResultGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<KeyResultGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof KeyResultGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], KeyResultGroupByOutputType[P]>
            : GetScalarType<T[P], KeyResultGroupByOutputType[P]>
        }
      >
    >


  export type KeyResultSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    objectiveId?: boolean
    description?: boolean
    owner?: boolean
    targetEndDate?: boolean
    progress?: boolean
    objective?: boolean | ObjectiveDefaultArgs<ExtArgs>
    cheers?: boolean | KeyResult$cheersArgs<ExtArgs>
    _count?: boolean | KeyResultCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["keyResult"]>

  export type KeyResultSelectScalar = {
    id?: boolean
    objectiveId?: boolean
    description?: boolean
    owner?: boolean
    targetEndDate?: boolean
    progress?: boolean
  }


  export type KeyResultInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    objective?: boolean | ObjectiveDefaultArgs<ExtArgs>
    cheers?: boolean | KeyResult$cheersArgs<ExtArgs>
    _count?: boolean | KeyResultCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $KeyResultPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "KeyResult"
    objects: {
      objective: Prisma.$ObjectivePayload<ExtArgs>
      cheers: Prisma.$CheerPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      objectiveId: number
      description: string
      owner: string
      targetEndDate: Date
      progress: $Enums.Progress
    }, ExtArgs["result"]["keyResult"]>
    composites: {}
  }


  type KeyResultGetPayload<S extends boolean | null | undefined | KeyResultDefaultArgs> = $Result.GetResult<Prisma.$KeyResultPayload, S>

  type KeyResultCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<KeyResultFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: KeyResultCountAggregateInputType | true
    }

  export interface KeyResultDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['KeyResult'], meta: { name: 'KeyResult' } }
    /**
     * Find zero or one KeyResult that matches the filter.
     * @param {KeyResultFindUniqueArgs} args - Arguments to find a KeyResult
     * @example
     * // Get one KeyResult
     * const keyResult = await prisma.keyResult.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends KeyResultFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, KeyResultFindUniqueArgs<ExtArgs>>
    ): Prisma__KeyResultClient<$Result.GetResult<Prisma.$KeyResultPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one KeyResult that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {KeyResultFindUniqueOrThrowArgs} args - Arguments to find a KeyResult
     * @example
     * // Get one KeyResult
     * const keyResult = await prisma.keyResult.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends KeyResultFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, KeyResultFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__KeyResultClient<$Result.GetResult<Prisma.$KeyResultPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first KeyResult that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeyResultFindFirstArgs} args - Arguments to find a KeyResult
     * @example
     * // Get one KeyResult
     * const keyResult = await prisma.keyResult.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends KeyResultFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, KeyResultFindFirstArgs<ExtArgs>>
    ): Prisma__KeyResultClient<$Result.GetResult<Prisma.$KeyResultPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first KeyResult that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeyResultFindFirstOrThrowArgs} args - Arguments to find a KeyResult
     * @example
     * // Get one KeyResult
     * const keyResult = await prisma.keyResult.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends KeyResultFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, KeyResultFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__KeyResultClient<$Result.GetResult<Prisma.$KeyResultPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more KeyResults that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeyResultFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all KeyResults
     * const keyResults = await prisma.keyResult.findMany()
     * 
     * // Get first 10 KeyResults
     * const keyResults = await prisma.keyResult.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const keyResultWithIdOnly = await prisma.keyResult.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends KeyResultFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, KeyResultFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KeyResultPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a KeyResult.
     * @param {KeyResultCreateArgs} args - Arguments to create a KeyResult.
     * @example
     * // Create one KeyResult
     * const KeyResult = await prisma.keyResult.create({
     *   data: {
     *     // ... data to create a KeyResult
     *   }
     * })
     * 
    **/
    create<T extends KeyResultCreateArgs<ExtArgs>>(
      args: SelectSubset<T, KeyResultCreateArgs<ExtArgs>>
    ): Prisma__KeyResultClient<$Result.GetResult<Prisma.$KeyResultPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many KeyResults.
     * @param {KeyResultCreateManyArgs} args - Arguments to create many KeyResults.
     * @example
     * // Create many KeyResults
     * const keyResult = await prisma.keyResult.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends KeyResultCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, KeyResultCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many KeyResults and returns the data saved in the database.
     * @param {KeyResultCreateManyAndReturnArgs} args - Arguments to create many KeyResults.
     * @example
     * // Create many KeyResults
     * const keyResult = await prisma.keyResult.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many KeyResults and only return the `id`
     * const keyResultWithIdOnly = await prisma.keyResult.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends KeyResultCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, KeyResultCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KeyResultPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a KeyResult.
     * @param {KeyResultDeleteArgs} args - Arguments to delete one KeyResult.
     * @example
     * // Delete one KeyResult
     * const KeyResult = await prisma.keyResult.delete({
     *   where: {
     *     // ... filter to delete one KeyResult
     *   }
     * })
     * 
    **/
    delete<T extends KeyResultDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, KeyResultDeleteArgs<ExtArgs>>
    ): Prisma__KeyResultClient<$Result.GetResult<Prisma.$KeyResultPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one KeyResult.
     * @param {KeyResultUpdateArgs} args - Arguments to update one KeyResult.
     * @example
     * // Update one KeyResult
     * const keyResult = await prisma.keyResult.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends KeyResultUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, KeyResultUpdateArgs<ExtArgs>>
    ): Prisma__KeyResultClient<$Result.GetResult<Prisma.$KeyResultPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more KeyResults.
     * @param {KeyResultDeleteManyArgs} args - Arguments to filter KeyResults to delete.
     * @example
     * // Delete a few KeyResults
     * const { count } = await prisma.keyResult.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends KeyResultDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, KeyResultDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more KeyResults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeyResultUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many KeyResults
     * const keyResult = await prisma.keyResult.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends KeyResultUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, KeyResultUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one KeyResult.
     * @param {KeyResultUpsertArgs} args - Arguments to update or create a KeyResult.
     * @example
     * // Update or create a KeyResult
     * const keyResult = await prisma.keyResult.upsert({
     *   create: {
     *     // ... data to create a KeyResult
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the KeyResult we want to update
     *   }
     * })
    **/
    upsert<T extends KeyResultUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, KeyResultUpsertArgs<ExtArgs>>
    ): Prisma__KeyResultClient<$Result.GetResult<Prisma.$KeyResultPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of KeyResults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeyResultCountArgs} args - Arguments to filter KeyResults to count.
     * @example
     * // Count the number of KeyResults
     * const count = await prisma.keyResult.count({
     *   where: {
     *     // ... the filter for the KeyResults we want to count
     *   }
     * })
    **/
    count<T extends KeyResultCountArgs>(
      args?: Subset<T, KeyResultCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KeyResultCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a KeyResult.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeyResultAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KeyResultAggregateArgs>(args: Subset<T, KeyResultAggregateArgs>): Prisma.PrismaPromise<GetKeyResultAggregateType<T>>

    /**
     * Group by KeyResult.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KeyResultGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends KeyResultGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: KeyResultGroupByArgs['orderBy'] }
        : { orderBy?: KeyResultGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, KeyResultGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKeyResultGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the KeyResult model
   */
  readonly fields: KeyResultFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for KeyResult.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__KeyResultClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    objective<T extends ObjectiveDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ObjectiveDefaultArgs<ExtArgs>>): Prisma__ObjectiveClient<$Result.GetResult<Prisma.$ObjectivePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    cheers<T extends KeyResult$cheersArgs<ExtArgs> = {}>(args?: Subset<T, KeyResult$cheersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CheerPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the KeyResult model
   */ 
  interface KeyResultFieldRefs {
    readonly id: FieldRef<"KeyResult", 'Int'>
    readonly objectiveId: FieldRef<"KeyResult", 'Int'>
    readonly description: FieldRef<"KeyResult", 'String'>
    readonly owner: FieldRef<"KeyResult", 'String'>
    readonly targetEndDate: FieldRef<"KeyResult", 'DateTime'>
    readonly progress: FieldRef<"KeyResult", 'Progress'>
  }
    

  // Custom InputTypes
  /**
   * KeyResult findUnique
   */
  export type KeyResultFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeyResult
     */
    select?: KeyResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeyResultInclude<ExtArgs> | null
    /**
     * Filter, which KeyResult to fetch.
     */
    where: KeyResultWhereUniqueInput
  }

  /**
   * KeyResult findUniqueOrThrow
   */
  export type KeyResultFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeyResult
     */
    select?: KeyResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeyResultInclude<ExtArgs> | null
    /**
     * Filter, which KeyResult to fetch.
     */
    where: KeyResultWhereUniqueInput
  }

  /**
   * KeyResult findFirst
   */
  export type KeyResultFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeyResult
     */
    select?: KeyResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeyResultInclude<ExtArgs> | null
    /**
     * Filter, which KeyResult to fetch.
     */
    where?: KeyResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KeyResults to fetch.
     */
    orderBy?: KeyResultOrderByWithRelationInput | KeyResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KeyResults.
     */
    cursor?: KeyResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KeyResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KeyResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KeyResults.
     */
    distinct?: KeyResultScalarFieldEnum | KeyResultScalarFieldEnum[]
  }

  /**
   * KeyResult findFirstOrThrow
   */
  export type KeyResultFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeyResult
     */
    select?: KeyResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeyResultInclude<ExtArgs> | null
    /**
     * Filter, which KeyResult to fetch.
     */
    where?: KeyResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KeyResults to fetch.
     */
    orderBy?: KeyResultOrderByWithRelationInput | KeyResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KeyResults.
     */
    cursor?: KeyResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KeyResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KeyResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KeyResults.
     */
    distinct?: KeyResultScalarFieldEnum | KeyResultScalarFieldEnum[]
  }

  /**
   * KeyResult findMany
   */
  export type KeyResultFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeyResult
     */
    select?: KeyResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeyResultInclude<ExtArgs> | null
    /**
     * Filter, which KeyResults to fetch.
     */
    where?: KeyResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KeyResults to fetch.
     */
    orderBy?: KeyResultOrderByWithRelationInput | KeyResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing KeyResults.
     */
    cursor?: KeyResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KeyResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KeyResults.
     */
    skip?: number
    distinct?: KeyResultScalarFieldEnum | KeyResultScalarFieldEnum[]
  }

  /**
   * KeyResult create
   */
  export type KeyResultCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeyResult
     */
    select?: KeyResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeyResultInclude<ExtArgs> | null
    /**
     * The data needed to create a KeyResult.
     */
    data: XOR<KeyResultCreateInput, KeyResultUncheckedCreateInput>
  }

  /**
   * KeyResult createMany
   */
  export type KeyResultCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many KeyResults.
     */
    data: KeyResultCreateManyInput | KeyResultCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * KeyResult createManyAndReturn
   */
  export type KeyResultCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeyResult
     */
    select?: KeyResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeyResultInclude<ExtArgs> | null
    /**
     * The data used to create many KeyResults.
     */
    data: KeyResultCreateManyInput | KeyResultCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * KeyResult update
   */
  export type KeyResultUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeyResult
     */
    select?: KeyResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeyResultInclude<ExtArgs> | null
    /**
     * The data needed to update a KeyResult.
     */
    data: XOR<KeyResultUpdateInput, KeyResultUncheckedUpdateInput>
    /**
     * Choose, which KeyResult to update.
     */
    where: KeyResultWhereUniqueInput
  }

  /**
   * KeyResult updateMany
   */
  export type KeyResultUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update KeyResults.
     */
    data: XOR<KeyResultUpdateManyMutationInput, KeyResultUncheckedUpdateManyInput>
    /**
     * Filter which KeyResults to update
     */
    where?: KeyResultWhereInput
  }

  /**
   * KeyResult upsert
   */
  export type KeyResultUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeyResult
     */
    select?: KeyResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeyResultInclude<ExtArgs> | null
    /**
     * The filter to search for the KeyResult to update in case it exists.
     */
    where: KeyResultWhereUniqueInput
    /**
     * In case the KeyResult found by the `where` argument doesn't exist, create a new KeyResult with this data.
     */
    create: XOR<KeyResultCreateInput, KeyResultUncheckedCreateInput>
    /**
     * In case the KeyResult was found with the provided `where` argument, update it with this data.
     */
    update: XOR<KeyResultUpdateInput, KeyResultUncheckedUpdateInput>
  }

  /**
   * KeyResult delete
   */
  export type KeyResultDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeyResult
     */
    select?: KeyResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeyResultInclude<ExtArgs> | null
    /**
     * Filter which KeyResult to delete.
     */
    where: KeyResultWhereUniqueInput
  }

  /**
   * KeyResult deleteMany
   */
  export type KeyResultDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which KeyResults to delete
     */
    where?: KeyResultWhereInput
  }

  /**
   * KeyResult.cheers
   */
  export type KeyResult$cheersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cheer
     */
    select?: CheerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheerInclude<ExtArgs> | null
    where?: CheerWhereInput
    orderBy?: CheerOrderByWithRelationInput | CheerOrderByWithRelationInput[]
    cursor?: CheerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CheerScalarFieldEnum | CheerScalarFieldEnum[]
  }

  /**
   * KeyResult without action
   */
  export type KeyResultDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KeyResult
     */
    select?: KeyResultSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KeyResultInclude<ExtArgs> | null
  }


  /**
   * Model Cheer
   */

  export type AggregateCheer = {
    _count: CheerCountAggregateOutputType | null
    _avg: CheerAvgAggregateOutputType | null
    _sum: CheerSumAggregateOutputType | null
    _min: CheerMinAggregateOutputType | null
    _max: CheerMaxAggregateOutputType | null
  }

  export type CheerAvgAggregateOutputType = {
    id: number | null
    keyResultId: number | null
  }

  export type CheerSumAggregateOutputType = {
    id: number | null
    keyResultId: number | null
  }

  export type CheerMinAggregateOutputType = {
    id: number | null
    keyResultId: number | null
    message: string | null
  }

  export type CheerMaxAggregateOutputType = {
    id: number | null
    keyResultId: number | null
    message: string | null
  }

  export type CheerCountAggregateOutputType = {
    id: number
    keyResultId: number
    message: number
    _all: number
  }


  export type CheerAvgAggregateInputType = {
    id?: true
    keyResultId?: true
  }

  export type CheerSumAggregateInputType = {
    id?: true
    keyResultId?: true
  }

  export type CheerMinAggregateInputType = {
    id?: true
    keyResultId?: true
    message?: true
  }

  export type CheerMaxAggregateInputType = {
    id?: true
    keyResultId?: true
    message?: true
  }

  export type CheerCountAggregateInputType = {
    id?: true
    keyResultId?: true
    message?: true
    _all?: true
  }

  export type CheerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cheer to aggregate.
     */
    where?: CheerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cheers to fetch.
     */
    orderBy?: CheerOrderByWithRelationInput | CheerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CheerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cheers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cheers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Cheers
    **/
    _count?: true | CheerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CheerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CheerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CheerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CheerMaxAggregateInputType
  }

  export type GetCheerAggregateType<T extends CheerAggregateArgs> = {
        [P in keyof T & keyof AggregateCheer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCheer[P]>
      : GetScalarType<T[P], AggregateCheer[P]>
  }




  export type CheerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CheerWhereInput
    orderBy?: CheerOrderByWithAggregationInput | CheerOrderByWithAggregationInput[]
    by: CheerScalarFieldEnum[] | CheerScalarFieldEnum
    having?: CheerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CheerCountAggregateInputType | true
    _avg?: CheerAvgAggregateInputType
    _sum?: CheerSumAggregateInputType
    _min?: CheerMinAggregateInputType
    _max?: CheerMaxAggregateInputType
  }

  export type CheerGroupByOutputType = {
    id: number
    keyResultId: number
    message: string
    _count: CheerCountAggregateOutputType | null
    _avg: CheerAvgAggregateOutputType | null
    _sum: CheerSumAggregateOutputType | null
    _min: CheerMinAggregateOutputType | null
    _max: CheerMaxAggregateOutputType | null
  }

  type GetCheerGroupByPayload<T extends CheerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CheerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CheerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CheerGroupByOutputType[P]>
            : GetScalarType<T[P], CheerGroupByOutputType[P]>
        }
      >
    >


  export type CheerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    keyResultId?: boolean
    message?: boolean
    keyResult?: boolean | KeyResultDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cheer"]>

  export type CheerSelectScalar = {
    id?: boolean
    keyResultId?: boolean
    message?: boolean
  }


  export type CheerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    keyResult?: boolean | KeyResultDefaultArgs<ExtArgs>
  }


  export type $CheerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Cheer"
    objects: {
      keyResult: Prisma.$KeyResultPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      keyResultId: number
      message: string
    }, ExtArgs["result"]["cheer"]>
    composites: {}
  }


  type CheerGetPayload<S extends boolean | null | undefined | CheerDefaultArgs> = $Result.GetResult<Prisma.$CheerPayload, S>

  type CheerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CheerFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CheerCountAggregateInputType | true
    }

  export interface CheerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Cheer'], meta: { name: 'Cheer' } }
    /**
     * Find zero or one Cheer that matches the filter.
     * @param {CheerFindUniqueArgs} args - Arguments to find a Cheer
     * @example
     * // Get one Cheer
     * const cheer = await prisma.cheer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CheerFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CheerFindUniqueArgs<ExtArgs>>
    ): Prisma__CheerClient<$Result.GetResult<Prisma.$CheerPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Cheer that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CheerFindUniqueOrThrowArgs} args - Arguments to find a Cheer
     * @example
     * // Get one Cheer
     * const cheer = await prisma.cheer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CheerFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CheerFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CheerClient<$Result.GetResult<Prisma.$CheerPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Cheer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CheerFindFirstArgs} args - Arguments to find a Cheer
     * @example
     * // Get one Cheer
     * const cheer = await prisma.cheer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CheerFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CheerFindFirstArgs<ExtArgs>>
    ): Prisma__CheerClient<$Result.GetResult<Prisma.$CheerPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Cheer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CheerFindFirstOrThrowArgs} args - Arguments to find a Cheer
     * @example
     * // Get one Cheer
     * const cheer = await prisma.cheer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CheerFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CheerFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CheerClient<$Result.GetResult<Prisma.$CheerPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Cheers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CheerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cheers
     * const cheers = await prisma.cheer.findMany()
     * 
     * // Get first 10 Cheers
     * const cheers = await prisma.cheer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cheerWithIdOnly = await prisma.cheer.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CheerFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CheerFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CheerPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Cheer.
     * @param {CheerCreateArgs} args - Arguments to create a Cheer.
     * @example
     * // Create one Cheer
     * const Cheer = await prisma.cheer.create({
     *   data: {
     *     // ... data to create a Cheer
     *   }
     * })
     * 
    **/
    create<T extends CheerCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CheerCreateArgs<ExtArgs>>
    ): Prisma__CheerClient<$Result.GetResult<Prisma.$CheerPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Cheers.
     * @param {CheerCreateManyArgs} args - Arguments to create many Cheers.
     * @example
     * // Create many Cheers
     * const cheer = await prisma.cheer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends CheerCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CheerCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Cheers and returns the data saved in the database.
     * @param {CheerCreateManyAndReturnArgs} args - Arguments to create many Cheers.
     * @example
     * // Create many Cheers
     * const cheer = await prisma.cheer.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Cheers and only return the `id`
     * const cheerWithIdOnly = await prisma.cheer.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends CheerCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, CheerCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CheerPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Cheer.
     * @param {CheerDeleteArgs} args - Arguments to delete one Cheer.
     * @example
     * // Delete one Cheer
     * const Cheer = await prisma.cheer.delete({
     *   where: {
     *     // ... filter to delete one Cheer
     *   }
     * })
     * 
    **/
    delete<T extends CheerDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CheerDeleteArgs<ExtArgs>>
    ): Prisma__CheerClient<$Result.GetResult<Prisma.$CheerPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Cheer.
     * @param {CheerUpdateArgs} args - Arguments to update one Cheer.
     * @example
     * // Update one Cheer
     * const cheer = await prisma.cheer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CheerUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CheerUpdateArgs<ExtArgs>>
    ): Prisma__CheerClient<$Result.GetResult<Prisma.$CheerPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Cheers.
     * @param {CheerDeleteManyArgs} args - Arguments to filter Cheers to delete.
     * @example
     * // Delete a few Cheers
     * const { count } = await prisma.cheer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CheerDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CheerDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cheers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CheerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cheers
     * const cheer = await prisma.cheer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CheerUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CheerUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Cheer.
     * @param {CheerUpsertArgs} args - Arguments to update or create a Cheer.
     * @example
     * // Update or create a Cheer
     * const cheer = await prisma.cheer.upsert({
     *   create: {
     *     // ... data to create a Cheer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cheer we want to update
     *   }
     * })
    **/
    upsert<T extends CheerUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CheerUpsertArgs<ExtArgs>>
    ): Prisma__CheerClient<$Result.GetResult<Prisma.$CheerPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Cheers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CheerCountArgs} args - Arguments to filter Cheers to count.
     * @example
     * // Count the number of Cheers
     * const count = await prisma.cheer.count({
     *   where: {
     *     // ... the filter for the Cheers we want to count
     *   }
     * })
    **/
    count<T extends CheerCountArgs>(
      args?: Subset<T, CheerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CheerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cheer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CheerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CheerAggregateArgs>(args: Subset<T, CheerAggregateArgs>): Prisma.PrismaPromise<GetCheerAggregateType<T>>

    /**
     * Group by Cheer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CheerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CheerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CheerGroupByArgs['orderBy'] }
        : { orderBy?: CheerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CheerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCheerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Cheer model
   */
  readonly fields: CheerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Cheer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CheerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    keyResult<T extends KeyResultDefaultArgs<ExtArgs> = {}>(args?: Subset<T, KeyResultDefaultArgs<ExtArgs>>): Prisma__KeyResultClient<$Result.GetResult<Prisma.$KeyResultPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Cheer model
   */ 
  interface CheerFieldRefs {
    readonly id: FieldRef<"Cheer", 'Int'>
    readonly keyResultId: FieldRef<"Cheer", 'Int'>
    readonly message: FieldRef<"Cheer", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Cheer findUnique
   */
  export type CheerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cheer
     */
    select?: CheerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheerInclude<ExtArgs> | null
    /**
     * Filter, which Cheer to fetch.
     */
    where: CheerWhereUniqueInput
  }

  /**
   * Cheer findUniqueOrThrow
   */
  export type CheerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cheer
     */
    select?: CheerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheerInclude<ExtArgs> | null
    /**
     * Filter, which Cheer to fetch.
     */
    where: CheerWhereUniqueInput
  }

  /**
   * Cheer findFirst
   */
  export type CheerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cheer
     */
    select?: CheerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheerInclude<ExtArgs> | null
    /**
     * Filter, which Cheer to fetch.
     */
    where?: CheerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cheers to fetch.
     */
    orderBy?: CheerOrderByWithRelationInput | CheerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cheers.
     */
    cursor?: CheerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cheers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cheers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cheers.
     */
    distinct?: CheerScalarFieldEnum | CheerScalarFieldEnum[]
  }

  /**
   * Cheer findFirstOrThrow
   */
  export type CheerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cheer
     */
    select?: CheerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheerInclude<ExtArgs> | null
    /**
     * Filter, which Cheer to fetch.
     */
    where?: CheerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cheers to fetch.
     */
    orderBy?: CheerOrderByWithRelationInput | CheerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cheers.
     */
    cursor?: CheerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cheers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cheers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cheers.
     */
    distinct?: CheerScalarFieldEnum | CheerScalarFieldEnum[]
  }

  /**
   * Cheer findMany
   */
  export type CheerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cheer
     */
    select?: CheerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheerInclude<ExtArgs> | null
    /**
     * Filter, which Cheers to fetch.
     */
    where?: CheerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cheers to fetch.
     */
    orderBy?: CheerOrderByWithRelationInput | CheerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Cheers.
     */
    cursor?: CheerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cheers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cheers.
     */
    skip?: number
    distinct?: CheerScalarFieldEnum | CheerScalarFieldEnum[]
  }

  /**
   * Cheer create
   */
  export type CheerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cheer
     */
    select?: CheerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheerInclude<ExtArgs> | null
    /**
     * The data needed to create a Cheer.
     */
    data: XOR<CheerCreateInput, CheerUncheckedCreateInput>
  }

  /**
   * Cheer createMany
   */
  export type CheerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Cheers.
     */
    data: CheerCreateManyInput | CheerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Cheer createManyAndReturn
   */
  export type CheerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cheer
     */
    select?: CheerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheerInclude<ExtArgs> | null
    /**
     * The data used to create many Cheers.
     */
    data: CheerCreateManyInput | CheerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Cheer update
   */
  export type CheerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cheer
     */
    select?: CheerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheerInclude<ExtArgs> | null
    /**
     * The data needed to update a Cheer.
     */
    data: XOR<CheerUpdateInput, CheerUncheckedUpdateInput>
    /**
     * Choose, which Cheer to update.
     */
    where: CheerWhereUniqueInput
  }

  /**
   * Cheer updateMany
   */
  export type CheerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Cheers.
     */
    data: XOR<CheerUpdateManyMutationInput, CheerUncheckedUpdateManyInput>
    /**
     * Filter which Cheers to update
     */
    where?: CheerWhereInput
  }

  /**
   * Cheer upsert
   */
  export type CheerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cheer
     */
    select?: CheerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheerInclude<ExtArgs> | null
    /**
     * The filter to search for the Cheer to update in case it exists.
     */
    where: CheerWhereUniqueInput
    /**
     * In case the Cheer found by the `where` argument doesn't exist, create a new Cheer with this data.
     */
    create: XOR<CheerCreateInput, CheerUncheckedCreateInput>
    /**
     * In case the Cheer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CheerUpdateInput, CheerUncheckedUpdateInput>
  }

  /**
   * Cheer delete
   */
  export type CheerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cheer
     */
    select?: CheerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheerInclude<ExtArgs> | null
    /**
     * Filter which Cheer to delete.
     */
    where: CheerWhereUniqueInput
  }

  /**
   * Cheer deleteMany
   */
  export type CheerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cheers to delete
     */
    where?: CheerWhereInput
  }

  /**
   * Cheer without action
   */
  export type CheerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cheer
     */
    select?: CheerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CheerInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ObjectiveScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type ObjectiveScalarFieldEnum = (typeof ObjectiveScalarFieldEnum)[keyof typeof ObjectiveScalarFieldEnum]


  export const KeyResultScalarFieldEnum: {
    id: 'id',
    objectiveId: 'objectiveId',
    description: 'description',
    owner: 'owner',
    targetEndDate: 'targetEndDate',
    progress: 'progress'
  };

  export type KeyResultScalarFieldEnum = (typeof KeyResultScalarFieldEnum)[keyof typeof KeyResultScalarFieldEnum]


  export const CheerScalarFieldEnum: {
    id: 'id',
    keyResultId: 'keyResultId',
    message: 'message'
  };

  export type CheerScalarFieldEnum = (typeof CheerScalarFieldEnum)[keyof typeof CheerScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Progress'
   */
  export type EnumProgressFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Progress'>
    


  /**
   * Reference to a field of type 'Progress[]'
   */
  export type ListEnumProgressFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Progress[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type ObjectiveWhereInput = {
    AND?: ObjectiveWhereInput | ObjectiveWhereInput[]
    OR?: ObjectiveWhereInput[]
    NOT?: ObjectiveWhereInput | ObjectiveWhereInput[]
    id?: IntFilter<"Objective"> | number
    name?: StringFilter<"Objective"> | string
    keyResults?: KeyResultListRelationFilter
  }

  export type ObjectiveOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    keyResults?: KeyResultOrderByRelationAggregateInput
  }

  export type ObjectiveWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ObjectiveWhereInput | ObjectiveWhereInput[]
    OR?: ObjectiveWhereInput[]
    NOT?: ObjectiveWhereInput | ObjectiveWhereInput[]
    name?: StringFilter<"Objective"> | string
    keyResults?: KeyResultListRelationFilter
  }, "id">

  export type ObjectiveOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: ObjectiveCountOrderByAggregateInput
    _avg?: ObjectiveAvgOrderByAggregateInput
    _max?: ObjectiveMaxOrderByAggregateInput
    _min?: ObjectiveMinOrderByAggregateInput
    _sum?: ObjectiveSumOrderByAggregateInput
  }

  export type ObjectiveScalarWhereWithAggregatesInput = {
    AND?: ObjectiveScalarWhereWithAggregatesInput | ObjectiveScalarWhereWithAggregatesInput[]
    OR?: ObjectiveScalarWhereWithAggregatesInput[]
    NOT?: ObjectiveScalarWhereWithAggregatesInput | ObjectiveScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Objective"> | number
    name?: StringWithAggregatesFilter<"Objective"> | string
  }

  export type KeyResultWhereInput = {
    AND?: KeyResultWhereInput | KeyResultWhereInput[]
    OR?: KeyResultWhereInput[]
    NOT?: KeyResultWhereInput | KeyResultWhereInput[]
    id?: IntFilter<"KeyResult"> | number
    objectiveId?: IntFilter<"KeyResult"> | number
    description?: StringFilter<"KeyResult"> | string
    owner?: StringFilter<"KeyResult"> | string
    targetEndDate?: DateTimeFilter<"KeyResult"> | Date | string
    progress?: EnumProgressFilter<"KeyResult"> | $Enums.Progress
    objective?: XOR<ObjectiveRelationFilter, ObjectiveWhereInput>
    cheers?: CheerListRelationFilter
  }

  export type KeyResultOrderByWithRelationInput = {
    id?: SortOrder
    objectiveId?: SortOrder
    description?: SortOrder
    owner?: SortOrder
    targetEndDate?: SortOrder
    progress?: SortOrder
    objective?: ObjectiveOrderByWithRelationInput
    cheers?: CheerOrderByRelationAggregateInput
  }

  export type KeyResultWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: KeyResultWhereInput | KeyResultWhereInput[]
    OR?: KeyResultWhereInput[]
    NOT?: KeyResultWhereInput | KeyResultWhereInput[]
    objectiveId?: IntFilter<"KeyResult"> | number
    description?: StringFilter<"KeyResult"> | string
    owner?: StringFilter<"KeyResult"> | string
    targetEndDate?: DateTimeFilter<"KeyResult"> | Date | string
    progress?: EnumProgressFilter<"KeyResult"> | $Enums.Progress
    objective?: XOR<ObjectiveRelationFilter, ObjectiveWhereInput>
    cheers?: CheerListRelationFilter
  }, "id">

  export type KeyResultOrderByWithAggregationInput = {
    id?: SortOrder
    objectiveId?: SortOrder
    description?: SortOrder
    owner?: SortOrder
    targetEndDate?: SortOrder
    progress?: SortOrder
    _count?: KeyResultCountOrderByAggregateInput
    _avg?: KeyResultAvgOrderByAggregateInput
    _max?: KeyResultMaxOrderByAggregateInput
    _min?: KeyResultMinOrderByAggregateInput
    _sum?: KeyResultSumOrderByAggregateInput
  }

  export type KeyResultScalarWhereWithAggregatesInput = {
    AND?: KeyResultScalarWhereWithAggregatesInput | KeyResultScalarWhereWithAggregatesInput[]
    OR?: KeyResultScalarWhereWithAggregatesInput[]
    NOT?: KeyResultScalarWhereWithAggregatesInput | KeyResultScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"KeyResult"> | number
    objectiveId?: IntWithAggregatesFilter<"KeyResult"> | number
    description?: StringWithAggregatesFilter<"KeyResult"> | string
    owner?: StringWithAggregatesFilter<"KeyResult"> | string
    targetEndDate?: DateTimeWithAggregatesFilter<"KeyResult"> | Date | string
    progress?: EnumProgressWithAggregatesFilter<"KeyResult"> | $Enums.Progress
  }

  export type CheerWhereInput = {
    AND?: CheerWhereInput | CheerWhereInput[]
    OR?: CheerWhereInput[]
    NOT?: CheerWhereInput | CheerWhereInput[]
    id?: IntFilter<"Cheer"> | number
    keyResultId?: IntFilter<"Cheer"> | number
    message?: StringFilter<"Cheer"> | string
    keyResult?: XOR<KeyResultRelationFilter, KeyResultWhereInput>
  }

  export type CheerOrderByWithRelationInput = {
    id?: SortOrder
    keyResultId?: SortOrder
    message?: SortOrder
    keyResult?: KeyResultOrderByWithRelationInput
  }

  export type CheerWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CheerWhereInput | CheerWhereInput[]
    OR?: CheerWhereInput[]
    NOT?: CheerWhereInput | CheerWhereInput[]
    keyResultId?: IntFilter<"Cheer"> | number
    message?: StringFilter<"Cheer"> | string
    keyResult?: XOR<KeyResultRelationFilter, KeyResultWhereInput>
  }, "id">

  export type CheerOrderByWithAggregationInput = {
    id?: SortOrder
    keyResultId?: SortOrder
    message?: SortOrder
    _count?: CheerCountOrderByAggregateInput
    _avg?: CheerAvgOrderByAggregateInput
    _max?: CheerMaxOrderByAggregateInput
    _min?: CheerMinOrderByAggregateInput
    _sum?: CheerSumOrderByAggregateInput
  }

  export type CheerScalarWhereWithAggregatesInput = {
    AND?: CheerScalarWhereWithAggregatesInput | CheerScalarWhereWithAggregatesInput[]
    OR?: CheerScalarWhereWithAggregatesInput[]
    NOT?: CheerScalarWhereWithAggregatesInput | CheerScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Cheer"> | number
    keyResultId?: IntWithAggregatesFilter<"Cheer"> | number
    message?: StringWithAggregatesFilter<"Cheer"> | string
  }

  export type ObjectiveCreateInput = {
    name: string
    keyResults?: KeyResultCreateNestedManyWithoutObjectiveInput
  }

  export type ObjectiveUncheckedCreateInput = {
    id?: number
    name: string
    keyResults?: KeyResultUncheckedCreateNestedManyWithoutObjectiveInput
  }

  export type ObjectiveUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    keyResults?: KeyResultUpdateManyWithoutObjectiveNestedInput
  }

  export type ObjectiveUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    keyResults?: KeyResultUncheckedUpdateManyWithoutObjectiveNestedInput
  }

  export type ObjectiveCreateManyInput = {
    id?: number
    name: string
  }

  export type ObjectiveUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ObjectiveUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type KeyResultCreateInput = {
    description: string
    owner: string
    targetEndDate: Date | string
    progress: $Enums.Progress
    objective: ObjectiveCreateNestedOneWithoutKeyResultsInput
    cheers?: CheerCreateNestedManyWithoutKeyResultInput
  }

  export type KeyResultUncheckedCreateInput = {
    id?: number
    objectiveId: number
    description: string
    owner: string
    targetEndDate: Date | string
    progress: $Enums.Progress
    cheers?: CheerUncheckedCreateNestedManyWithoutKeyResultInput
  }

  export type KeyResultUpdateInput = {
    description?: StringFieldUpdateOperationsInput | string
    owner?: StringFieldUpdateOperationsInput | string
    targetEndDate?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: EnumProgressFieldUpdateOperationsInput | $Enums.Progress
    objective?: ObjectiveUpdateOneRequiredWithoutKeyResultsNestedInput
    cheers?: CheerUpdateManyWithoutKeyResultNestedInput
  }

  export type KeyResultUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    objectiveId?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    owner?: StringFieldUpdateOperationsInput | string
    targetEndDate?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: EnumProgressFieldUpdateOperationsInput | $Enums.Progress
    cheers?: CheerUncheckedUpdateManyWithoutKeyResultNestedInput
  }

  export type KeyResultCreateManyInput = {
    id?: number
    objectiveId: number
    description: string
    owner: string
    targetEndDate: Date | string
    progress: $Enums.Progress
  }

  export type KeyResultUpdateManyMutationInput = {
    description?: StringFieldUpdateOperationsInput | string
    owner?: StringFieldUpdateOperationsInput | string
    targetEndDate?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: EnumProgressFieldUpdateOperationsInput | $Enums.Progress
  }

  export type KeyResultUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    objectiveId?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    owner?: StringFieldUpdateOperationsInput | string
    targetEndDate?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: EnumProgressFieldUpdateOperationsInput | $Enums.Progress
  }

  export type CheerCreateInput = {
    message: string
    keyResult: KeyResultCreateNestedOneWithoutCheersInput
  }

  export type CheerUncheckedCreateInput = {
    id?: number
    keyResultId: number
    message: string
  }

  export type CheerUpdateInput = {
    message?: StringFieldUpdateOperationsInput | string
    keyResult?: KeyResultUpdateOneRequiredWithoutCheersNestedInput
  }

  export type CheerUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    keyResultId?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
  }

  export type CheerCreateManyInput = {
    id?: number
    keyResultId: number
    message: string
  }

  export type CheerUpdateManyMutationInput = {
    message?: StringFieldUpdateOperationsInput | string
  }

  export type CheerUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    keyResultId?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type KeyResultListRelationFilter = {
    every?: KeyResultWhereInput
    some?: KeyResultWhereInput
    none?: KeyResultWhereInput
  }

  export type KeyResultOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ObjectiveCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type ObjectiveAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ObjectiveMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type ObjectiveMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type ObjectiveSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type EnumProgressFilter<$PrismaModel = never> = {
    equals?: $Enums.Progress | EnumProgressFieldRefInput<$PrismaModel>
    in?: $Enums.Progress[] | ListEnumProgressFieldRefInput<$PrismaModel>
    notIn?: $Enums.Progress[] | ListEnumProgressFieldRefInput<$PrismaModel>
    not?: NestedEnumProgressFilter<$PrismaModel> | $Enums.Progress
  }

  export type ObjectiveRelationFilter = {
    is?: ObjectiveWhereInput
    isNot?: ObjectiveWhereInput
  }

  export type CheerListRelationFilter = {
    every?: CheerWhereInput
    some?: CheerWhereInput
    none?: CheerWhereInput
  }

  export type CheerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type KeyResultCountOrderByAggregateInput = {
    id?: SortOrder
    objectiveId?: SortOrder
    description?: SortOrder
    owner?: SortOrder
    targetEndDate?: SortOrder
    progress?: SortOrder
  }

  export type KeyResultAvgOrderByAggregateInput = {
    id?: SortOrder
    objectiveId?: SortOrder
  }

  export type KeyResultMaxOrderByAggregateInput = {
    id?: SortOrder
    objectiveId?: SortOrder
    description?: SortOrder
    owner?: SortOrder
    targetEndDate?: SortOrder
    progress?: SortOrder
  }

  export type KeyResultMinOrderByAggregateInput = {
    id?: SortOrder
    objectiveId?: SortOrder
    description?: SortOrder
    owner?: SortOrder
    targetEndDate?: SortOrder
    progress?: SortOrder
  }

  export type KeyResultSumOrderByAggregateInput = {
    id?: SortOrder
    objectiveId?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumProgressWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Progress | EnumProgressFieldRefInput<$PrismaModel>
    in?: $Enums.Progress[] | ListEnumProgressFieldRefInput<$PrismaModel>
    notIn?: $Enums.Progress[] | ListEnumProgressFieldRefInput<$PrismaModel>
    not?: NestedEnumProgressWithAggregatesFilter<$PrismaModel> | $Enums.Progress
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProgressFilter<$PrismaModel>
    _max?: NestedEnumProgressFilter<$PrismaModel>
  }

  export type KeyResultRelationFilter = {
    is?: KeyResultWhereInput
    isNot?: KeyResultWhereInput
  }

  export type CheerCountOrderByAggregateInput = {
    id?: SortOrder
    keyResultId?: SortOrder
    message?: SortOrder
  }

  export type CheerAvgOrderByAggregateInput = {
    id?: SortOrder
    keyResultId?: SortOrder
  }

  export type CheerMaxOrderByAggregateInput = {
    id?: SortOrder
    keyResultId?: SortOrder
    message?: SortOrder
  }

  export type CheerMinOrderByAggregateInput = {
    id?: SortOrder
    keyResultId?: SortOrder
    message?: SortOrder
  }

  export type CheerSumOrderByAggregateInput = {
    id?: SortOrder
    keyResultId?: SortOrder
  }

  export type KeyResultCreateNestedManyWithoutObjectiveInput = {
    create?: XOR<KeyResultCreateWithoutObjectiveInput, KeyResultUncheckedCreateWithoutObjectiveInput> | KeyResultCreateWithoutObjectiveInput[] | KeyResultUncheckedCreateWithoutObjectiveInput[]
    connectOrCreate?: KeyResultCreateOrConnectWithoutObjectiveInput | KeyResultCreateOrConnectWithoutObjectiveInput[]
    createMany?: KeyResultCreateManyObjectiveInputEnvelope
    connect?: KeyResultWhereUniqueInput | KeyResultWhereUniqueInput[]
  }

  export type KeyResultUncheckedCreateNestedManyWithoutObjectiveInput = {
    create?: XOR<KeyResultCreateWithoutObjectiveInput, KeyResultUncheckedCreateWithoutObjectiveInput> | KeyResultCreateWithoutObjectiveInput[] | KeyResultUncheckedCreateWithoutObjectiveInput[]
    connectOrCreate?: KeyResultCreateOrConnectWithoutObjectiveInput | KeyResultCreateOrConnectWithoutObjectiveInput[]
    createMany?: KeyResultCreateManyObjectiveInputEnvelope
    connect?: KeyResultWhereUniqueInput | KeyResultWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type KeyResultUpdateManyWithoutObjectiveNestedInput = {
    create?: XOR<KeyResultCreateWithoutObjectiveInput, KeyResultUncheckedCreateWithoutObjectiveInput> | KeyResultCreateWithoutObjectiveInput[] | KeyResultUncheckedCreateWithoutObjectiveInput[]
    connectOrCreate?: KeyResultCreateOrConnectWithoutObjectiveInput | KeyResultCreateOrConnectWithoutObjectiveInput[]
    upsert?: KeyResultUpsertWithWhereUniqueWithoutObjectiveInput | KeyResultUpsertWithWhereUniqueWithoutObjectiveInput[]
    createMany?: KeyResultCreateManyObjectiveInputEnvelope
    set?: KeyResultWhereUniqueInput | KeyResultWhereUniqueInput[]
    disconnect?: KeyResultWhereUniqueInput | KeyResultWhereUniqueInput[]
    delete?: KeyResultWhereUniqueInput | KeyResultWhereUniqueInput[]
    connect?: KeyResultWhereUniqueInput | KeyResultWhereUniqueInput[]
    update?: KeyResultUpdateWithWhereUniqueWithoutObjectiveInput | KeyResultUpdateWithWhereUniqueWithoutObjectiveInput[]
    updateMany?: KeyResultUpdateManyWithWhereWithoutObjectiveInput | KeyResultUpdateManyWithWhereWithoutObjectiveInput[]
    deleteMany?: KeyResultScalarWhereInput | KeyResultScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type KeyResultUncheckedUpdateManyWithoutObjectiveNestedInput = {
    create?: XOR<KeyResultCreateWithoutObjectiveInput, KeyResultUncheckedCreateWithoutObjectiveInput> | KeyResultCreateWithoutObjectiveInput[] | KeyResultUncheckedCreateWithoutObjectiveInput[]
    connectOrCreate?: KeyResultCreateOrConnectWithoutObjectiveInput | KeyResultCreateOrConnectWithoutObjectiveInput[]
    upsert?: KeyResultUpsertWithWhereUniqueWithoutObjectiveInput | KeyResultUpsertWithWhereUniqueWithoutObjectiveInput[]
    createMany?: KeyResultCreateManyObjectiveInputEnvelope
    set?: KeyResultWhereUniqueInput | KeyResultWhereUniqueInput[]
    disconnect?: KeyResultWhereUniqueInput | KeyResultWhereUniqueInput[]
    delete?: KeyResultWhereUniqueInput | KeyResultWhereUniqueInput[]
    connect?: KeyResultWhereUniqueInput | KeyResultWhereUniqueInput[]
    update?: KeyResultUpdateWithWhereUniqueWithoutObjectiveInput | KeyResultUpdateWithWhereUniqueWithoutObjectiveInput[]
    updateMany?: KeyResultUpdateManyWithWhereWithoutObjectiveInput | KeyResultUpdateManyWithWhereWithoutObjectiveInput[]
    deleteMany?: KeyResultScalarWhereInput | KeyResultScalarWhereInput[]
  }

  export type ObjectiveCreateNestedOneWithoutKeyResultsInput = {
    create?: XOR<ObjectiveCreateWithoutKeyResultsInput, ObjectiveUncheckedCreateWithoutKeyResultsInput>
    connectOrCreate?: ObjectiveCreateOrConnectWithoutKeyResultsInput
    connect?: ObjectiveWhereUniqueInput
  }

  export type CheerCreateNestedManyWithoutKeyResultInput = {
    create?: XOR<CheerCreateWithoutKeyResultInput, CheerUncheckedCreateWithoutKeyResultInput> | CheerCreateWithoutKeyResultInput[] | CheerUncheckedCreateWithoutKeyResultInput[]
    connectOrCreate?: CheerCreateOrConnectWithoutKeyResultInput | CheerCreateOrConnectWithoutKeyResultInput[]
    createMany?: CheerCreateManyKeyResultInputEnvelope
    connect?: CheerWhereUniqueInput | CheerWhereUniqueInput[]
  }

  export type CheerUncheckedCreateNestedManyWithoutKeyResultInput = {
    create?: XOR<CheerCreateWithoutKeyResultInput, CheerUncheckedCreateWithoutKeyResultInput> | CheerCreateWithoutKeyResultInput[] | CheerUncheckedCreateWithoutKeyResultInput[]
    connectOrCreate?: CheerCreateOrConnectWithoutKeyResultInput | CheerCreateOrConnectWithoutKeyResultInput[]
    createMany?: CheerCreateManyKeyResultInputEnvelope
    connect?: CheerWhereUniqueInput | CheerWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type EnumProgressFieldUpdateOperationsInput = {
    set?: $Enums.Progress
  }

  export type ObjectiveUpdateOneRequiredWithoutKeyResultsNestedInput = {
    create?: XOR<ObjectiveCreateWithoutKeyResultsInput, ObjectiveUncheckedCreateWithoutKeyResultsInput>
    connectOrCreate?: ObjectiveCreateOrConnectWithoutKeyResultsInput
    upsert?: ObjectiveUpsertWithoutKeyResultsInput
    connect?: ObjectiveWhereUniqueInput
    update?: XOR<XOR<ObjectiveUpdateToOneWithWhereWithoutKeyResultsInput, ObjectiveUpdateWithoutKeyResultsInput>, ObjectiveUncheckedUpdateWithoutKeyResultsInput>
  }

  export type CheerUpdateManyWithoutKeyResultNestedInput = {
    create?: XOR<CheerCreateWithoutKeyResultInput, CheerUncheckedCreateWithoutKeyResultInput> | CheerCreateWithoutKeyResultInput[] | CheerUncheckedCreateWithoutKeyResultInput[]
    connectOrCreate?: CheerCreateOrConnectWithoutKeyResultInput | CheerCreateOrConnectWithoutKeyResultInput[]
    upsert?: CheerUpsertWithWhereUniqueWithoutKeyResultInput | CheerUpsertWithWhereUniqueWithoutKeyResultInput[]
    createMany?: CheerCreateManyKeyResultInputEnvelope
    set?: CheerWhereUniqueInput | CheerWhereUniqueInput[]
    disconnect?: CheerWhereUniqueInput | CheerWhereUniqueInput[]
    delete?: CheerWhereUniqueInput | CheerWhereUniqueInput[]
    connect?: CheerWhereUniqueInput | CheerWhereUniqueInput[]
    update?: CheerUpdateWithWhereUniqueWithoutKeyResultInput | CheerUpdateWithWhereUniqueWithoutKeyResultInput[]
    updateMany?: CheerUpdateManyWithWhereWithoutKeyResultInput | CheerUpdateManyWithWhereWithoutKeyResultInput[]
    deleteMany?: CheerScalarWhereInput | CheerScalarWhereInput[]
  }

  export type CheerUncheckedUpdateManyWithoutKeyResultNestedInput = {
    create?: XOR<CheerCreateWithoutKeyResultInput, CheerUncheckedCreateWithoutKeyResultInput> | CheerCreateWithoutKeyResultInput[] | CheerUncheckedCreateWithoutKeyResultInput[]
    connectOrCreate?: CheerCreateOrConnectWithoutKeyResultInput | CheerCreateOrConnectWithoutKeyResultInput[]
    upsert?: CheerUpsertWithWhereUniqueWithoutKeyResultInput | CheerUpsertWithWhereUniqueWithoutKeyResultInput[]
    createMany?: CheerCreateManyKeyResultInputEnvelope
    set?: CheerWhereUniqueInput | CheerWhereUniqueInput[]
    disconnect?: CheerWhereUniqueInput | CheerWhereUniqueInput[]
    delete?: CheerWhereUniqueInput | CheerWhereUniqueInput[]
    connect?: CheerWhereUniqueInput | CheerWhereUniqueInput[]
    update?: CheerUpdateWithWhereUniqueWithoutKeyResultInput | CheerUpdateWithWhereUniqueWithoutKeyResultInput[]
    updateMany?: CheerUpdateManyWithWhereWithoutKeyResultInput | CheerUpdateManyWithWhereWithoutKeyResultInput[]
    deleteMany?: CheerScalarWhereInput | CheerScalarWhereInput[]
  }

  export type KeyResultCreateNestedOneWithoutCheersInput = {
    create?: XOR<KeyResultCreateWithoutCheersInput, KeyResultUncheckedCreateWithoutCheersInput>
    connectOrCreate?: KeyResultCreateOrConnectWithoutCheersInput
    connect?: KeyResultWhereUniqueInput
  }

  export type KeyResultUpdateOneRequiredWithoutCheersNestedInput = {
    create?: XOR<KeyResultCreateWithoutCheersInput, KeyResultUncheckedCreateWithoutCheersInput>
    connectOrCreate?: KeyResultCreateOrConnectWithoutCheersInput
    upsert?: KeyResultUpsertWithoutCheersInput
    connect?: KeyResultWhereUniqueInput
    update?: XOR<XOR<KeyResultUpdateToOneWithWhereWithoutCheersInput, KeyResultUpdateWithoutCheersInput>, KeyResultUncheckedUpdateWithoutCheersInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedEnumProgressFilter<$PrismaModel = never> = {
    equals?: $Enums.Progress | EnumProgressFieldRefInput<$PrismaModel>
    in?: $Enums.Progress[] | ListEnumProgressFieldRefInput<$PrismaModel>
    notIn?: $Enums.Progress[] | ListEnumProgressFieldRefInput<$PrismaModel>
    not?: NestedEnumProgressFilter<$PrismaModel> | $Enums.Progress
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumProgressWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Progress | EnumProgressFieldRefInput<$PrismaModel>
    in?: $Enums.Progress[] | ListEnumProgressFieldRefInput<$PrismaModel>
    notIn?: $Enums.Progress[] | ListEnumProgressFieldRefInput<$PrismaModel>
    not?: NestedEnumProgressWithAggregatesFilter<$PrismaModel> | $Enums.Progress
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProgressFilter<$PrismaModel>
    _max?: NestedEnumProgressFilter<$PrismaModel>
  }

  export type KeyResultCreateWithoutObjectiveInput = {
    description: string
    owner: string
    targetEndDate: Date | string
    progress: $Enums.Progress
    cheers?: CheerCreateNestedManyWithoutKeyResultInput
  }

  export type KeyResultUncheckedCreateWithoutObjectiveInput = {
    id?: number
    description: string
    owner: string
    targetEndDate: Date | string
    progress: $Enums.Progress
    cheers?: CheerUncheckedCreateNestedManyWithoutKeyResultInput
  }

  export type KeyResultCreateOrConnectWithoutObjectiveInput = {
    where: KeyResultWhereUniqueInput
    create: XOR<KeyResultCreateWithoutObjectiveInput, KeyResultUncheckedCreateWithoutObjectiveInput>
  }

  export type KeyResultCreateManyObjectiveInputEnvelope = {
    data: KeyResultCreateManyObjectiveInput | KeyResultCreateManyObjectiveInput[]
    skipDuplicates?: boolean
  }

  export type KeyResultUpsertWithWhereUniqueWithoutObjectiveInput = {
    where: KeyResultWhereUniqueInput
    update: XOR<KeyResultUpdateWithoutObjectiveInput, KeyResultUncheckedUpdateWithoutObjectiveInput>
    create: XOR<KeyResultCreateWithoutObjectiveInput, KeyResultUncheckedCreateWithoutObjectiveInput>
  }

  export type KeyResultUpdateWithWhereUniqueWithoutObjectiveInput = {
    where: KeyResultWhereUniqueInput
    data: XOR<KeyResultUpdateWithoutObjectiveInput, KeyResultUncheckedUpdateWithoutObjectiveInput>
  }

  export type KeyResultUpdateManyWithWhereWithoutObjectiveInput = {
    where: KeyResultScalarWhereInput
    data: XOR<KeyResultUpdateManyMutationInput, KeyResultUncheckedUpdateManyWithoutObjectiveInput>
  }

  export type KeyResultScalarWhereInput = {
    AND?: KeyResultScalarWhereInput | KeyResultScalarWhereInput[]
    OR?: KeyResultScalarWhereInput[]
    NOT?: KeyResultScalarWhereInput | KeyResultScalarWhereInput[]
    id?: IntFilter<"KeyResult"> | number
    objectiveId?: IntFilter<"KeyResult"> | number
    description?: StringFilter<"KeyResult"> | string
    owner?: StringFilter<"KeyResult"> | string
    targetEndDate?: DateTimeFilter<"KeyResult"> | Date | string
    progress?: EnumProgressFilter<"KeyResult"> | $Enums.Progress
  }

  export type ObjectiveCreateWithoutKeyResultsInput = {
    name: string
  }

  export type ObjectiveUncheckedCreateWithoutKeyResultsInput = {
    id?: number
    name: string
  }

  export type ObjectiveCreateOrConnectWithoutKeyResultsInput = {
    where: ObjectiveWhereUniqueInput
    create: XOR<ObjectiveCreateWithoutKeyResultsInput, ObjectiveUncheckedCreateWithoutKeyResultsInput>
  }

  export type CheerCreateWithoutKeyResultInput = {
    message: string
  }

  export type CheerUncheckedCreateWithoutKeyResultInput = {
    id?: number
    message: string
  }

  export type CheerCreateOrConnectWithoutKeyResultInput = {
    where: CheerWhereUniqueInput
    create: XOR<CheerCreateWithoutKeyResultInput, CheerUncheckedCreateWithoutKeyResultInput>
  }

  export type CheerCreateManyKeyResultInputEnvelope = {
    data: CheerCreateManyKeyResultInput | CheerCreateManyKeyResultInput[]
    skipDuplicates?: boolean
  }

  export type ObjectiveUpsertWithoutKeyResultsInput = {
    update: XOR<ObjectiveUpdateWithoutKeyResultsInput, ObjectiveUncheckedUpdateWithoutKeyResultsInput>
    create: XOR<ObjectiveCreateWithoutKeyResultsInput, ObjectiveUncheckedCreateWithoutKeyResultsInput>
    where?: ObjectiveWhereInput
  }

  export type ObjectiveUpdateToOneWithWhereWithoutKeyResultsInput = {
    where?: ObjectiveWhereInput
    data: XOR<ObjectiveUpdateWithoutKeyResultsInput, ObjectiveUncheckedUpdateWithoutKeyResultsInput>
  }

  export type ObjectiveUpdateWithoutKeyResultsInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ObjectiveUncheckedUpdateWithoutKeyResultsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CheerUpsertWithWhereUniqueWithoutKeyResultInput = {
    where: CheerWhereUniqueInput
    update: XOR<CheerUpdateWithoutKeyResultInput, CheerUncheckedUpdateWithoutKeyResultInput>
    create: XOR<CheerCreateWithoutKeyResultInput, CheerUncheckedCreateWithoutKeyResultInput>
  }

  export type CheerUpdateWithWhereUniqueWithoutKeyResultInput = {
    where: CheerWhereUniqueInput
    data: XOR<CheerUpdateWithoutKeyResultInput, CheerUncheckedUpdateWithoutKeyResultInput>
  }

  export type CheerUpdateManyWithWhereWithoutKeyResultInput = {
    where: CheerScalarWhereInput
    data: XOR<CheerUpdateManyMutationInput, CheerUncheckedUpdateManyWithoutKeyResultInput>
  }

  export type CheerScalarWhereInput = {
    AND?: CheerScalarWhereInput | CheerScalarWhereInput[]
    OR?: CheerScalarWhereInput[]
    NOT?: CheerScalarWhereInput | CheerScalarWhereInput[]
    id?: IntFilter<"Cheer"> | number
    keyResultId?: IntFilter<"Cheer"> | number
    message?: StringFilter<"Cheer"> | string
  }

  export type KeyResultCreateWithoutCheersInput = {
    description: string
    owner: string
    targetEndDate: Date | string
    progress: $Enums.Progress
    objective: ObjectiveCreateNestedOneWithoutKeyResultsInput
  }

  export type KeyResultUncheckedCreateWithoutCheersInput = {
    id?: number
    objectiveId: number
    description: string
    owner: string
    targetEndDate: Date | string
    progress: $Enums.Progress
  }

  export type KeyResultCreateOrConnectWithoutCheersInput = {
    where: KeyResultWhereUniqueInput
    create: XOR<KeyResultCreateWithoutCheersInput, KeyResultUncheckedCreateWithoutCheersInput>
  }

  export type KeyResultUpsertWithoutCheersInput = {
    update: XOR<KeyResultUpdateWithoutCheersInput, KeyResultUncheckedUpdateWithoutCheersInput>
    create: XOR<KeyResultCreateWithoutCheersInput, KeyResultUncheckedCreateWithoutCheersInput>
    where?: KeyResultWhereInput
  }

  export type KeyResultUpdateToOneWithWhereWithoutCheersInput = {
    where?: KeyResultWhereInput
    data: XOR<KeyResultUpdateWithoutCheersInput, KeyResultUncheckedUpdateWithoutCheersInput>
  }

  export type KeyResultUpdateWithoutCheersInput = {
    description?: StringFieldUpdateOperationsInput | string
    owner?: StringFieldUpdateOperationsInput | string
    targetEndDate?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: EnumProgressFieldUpdateOperationsInput | $Enums.Progress
    objective?: ObjectiveUpdateOneRequiredWithoutKeyResultsNestedInput
  }

  export type KeyResultUncheckedUpdateWithoutCheersInput = {
    id?: IntFieldUpdateOperationsInput | number
    objectiveId?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    owner?: StringFieldUpdateOperationsInput | string
    targetEndDate?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: EnumProgressFieldUpdateOperationsInput | $Enums.Progress
  }

  export type KeyResultCreateManyObjectiveInput = {
    id?: number
    description: string
    owner: string
    targetEndDate: Date | string
    progress: $Enums.Progress
  }

  export type KeyResultUpdateWithoutObjectiveInput = {
    description?: StringFieldUpdateOperationsInput | string
    owner?: StringFieldUpdateOperationsInput | string
    targetEndDate?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: EnumProgressFieldUpdateOperationsInput | $Enums.Progress
    cheers?: CheerUpdateManyWithoutKeyResultNestedInput
  }

  export type KeyResultUncheckedUpdateWithoutObjectiveInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    owner?: StringFieldUpdateOperationsInput | string
    targetEndDate?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: EnumProgressFieldUpdateOperationsInput | $Enums.Progress
    cheers?: CheerUncheckedUpdateManyWithoutKeyResultNestedInput
  }

  export type KeyResultUncheckedUpdateManyWithoutObjectiveInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    owner?: StringFieldUpdateOperationsInput | string
    targetEndDate?: DateTimeFieldUpdateOperationsInput | Date | string
    progress?: EnumProgressFieldUpdateOperationsInput | $Enums.Progress
  }

  export type CheerCreateManyKeyResultInput = {
    id?: number
    message: string
  }

  export type CheerUpdateWithoutKeyResultInput = {
    message?: StringFieldUpdateOperationsInput | string
  }

  export type CheerUncheckedUpdateWithoutKeyResultInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
  }

  export type CheerUncheckedUpdateManyWithoutKeyResultInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use ObjectiveCountOutputTypeDefaultArgs instead
     */
    export type ObjectiveCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ObjectiveCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use KeyResultCountOutputTypeDefaultArgs instead
     */
    export type KeyResultCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = KeyResultCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ObjectiveDefaultArgs instead
     */
    export type ObjectiveArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ObjectiveDefaultArgs<ExtArgs>
    /**
     * @deprecated Use KeyResultDefaultArgs instead
     */
    export type KeyResultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = KeyResultDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CheerDefaultArgs instead
     */
    export type CheerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CheerDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}